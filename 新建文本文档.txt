import List"mo:base/List";
import Iter"mo:base/Iter";
import Principal"mo:base/Principal";
import Time"mo:base/Time";
actor {

    public type Message = {
        message: Text;
        time: Time.Time;
    };
    public type microblog =actor{
        follow: shared(Principal)->async();
        follows: shared query () -> async[Principal];
        post: shared(Text) -> async();
        posts: shared query (Time.Time) ->async[Message];
        timeline: shared (Time.Time) -> async[Message];
    };

     stable var followed : List.List<Principal> = List.nil<Principal>();

      public shared func follow(id: Principal) : async () {
         followed := List.push<Principal>(id,followed);
     };
      public shared query func follows() : async [Principal]{
      List.toArray(followed)
     };

     stable var messages : List.List<Message> = List.nil<Message>();
      public shared (msg) func post(text: Text) : async () {
          // assert(Principal.toText(msg.caller) == "godmq-yrcn6-utvf5-mxhnp-kx6jz-dcykw-l7pdk-yr6ek-3fhn5-6ax4k-wae");
           let bg = {
               message = text;
               time = Time.now();
           };
           messages := List.push(bg, messages);
     } ;

       public shared query func posts(ltt: Time.Time) : async [Message]{
        func bgm(message: Message): Bool{
         message.time >= ltt;
        };
    
     var result: List.List<Message> = List.filter(messages: List.List<Message>,bgm);
     List.toArray(result);

     };
     public shared func resetFollows():async (){
        // reset the followed
        let size = List.size(followed);
        followed := List.drop(followed,size)
    };
     
       public shared func timeline(ltt: Time.Time) : async [Message]{
        var all : List.List<Message> = List.nil();

        for (id in Iter.fromList(followed)) {
            let canister : microblog = actor(Principal.toText(id));
            let msgs = await canister.posts(ltt);
            for (msg in Iter.fromArray(msgs)){
                all := List.push(msg,all);
            }

            };
       List.toArray(all);
        };
       };